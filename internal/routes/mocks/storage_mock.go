// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/artnikel/vacancystats/internal/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockStorage
func (_mock *MockStorage) Create(ctx context.Context, vacancy *model.Vacancy) error {
	ret := _mock.Called(ctx, vacancy)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Vacancy) error); ok {
		r0 = returnFunc(ctx, vacancy)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockStorage_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - vacancy
func (_e *MockStorage_Expecter) Create(ctx interface{}, vacancy interface{}) *MockStorage_Create_Call {
	return &MockStorage_Create_Call{Call: _e.mock.On("Create", ctx, vacancy)}
}

func (_c *MockStorage_Create_Call) Run(run func(ctx context.Context, vacancy *model.Vacancy)) *MockStorage_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Vacancy))
	})
	return _c
}

func (_c *MockStorage_Create_Call) Return(err error) *MockStorage_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Create_Call) RunAndReturn(run func(ctx context.Context, vacancy *model.Vacancy) error) *MockStorage_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockStorage
func (_mock *MockStorage) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStorage_Expecter) Delete(ctx interface{}, id interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockStorage_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return(err error) *MockStorage_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockStorage
func (_mock *MockStorage) GetAll(ctx context.Context) ([]*model.Vacancy, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.Vacancy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*model.Vacancy, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*model.Vacancy); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Vacancy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockStorage_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
func (_e *MockStorage_Expecter) GetAll(ctx interface{}) *MockStorage_GetAll_Call {
	return &MockStorage_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockStorage_GetAll_Call) Run(run func(ctx context.Context)) *MockStorage_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorage_GetAll_Call) Return(vacancys []*model.Vacancy, err error) *MockStorage_GetAll_Call {
	_c.Call.Return(vacancys, err)
	return _c
}

func (_c *MockStorage_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]*model.Vacancy, error)) *MockStorage_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateStatus(ctx context.Context, vacancy *model.Vacancy) error {
	ret := _mock.Called(ctx, vacancy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Vacancy) error); ok {
		r0 = returnFunc(ctx, vacancy)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockStorage_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - vacancy
func (_e *MockStorage_Expecter) UpdateStatus(ctx interface{}, vacancy interface{}) *MockStorage_UpdateStatus_Call {
	return &MockStorage_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, vacancy)}
}

func (_c *MockStorage_UpdateStatus_Call) Run(run func(ctx context.Context, vacancy *model.Vacancy)) *MockStorage_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Vacancy))
	})
	return _c
}

func (_c *MockStorage_UpdateStatus_Call) Return(err error) *MockStorage_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, vacancy *model.Vacancy) error) *MockStorage_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}
